<Calculator>:
    BoxLayout:
        orientation: 'vertical'
        TopMenu:
            SettingsButton:
        Abacus:
            #HelpButton:
            ClearButton:
        BoxLayout:
            orientation: 'horizontal'
            Ledger:
                #HelpButton:
                #ClearButton:
                NumberButton:
            OperationsBar:
            CuneiformDrawingInput:
                HelpButton:
                ClearButton:

<TopMenu>:
    size_hint_y: None
    height: 32
    canvas.before:
        Color:
            rgb: .8, .8, .8
        Rectangle:
            source: 'assets/graphics/wood.png'
            size: self.size
            pos: self.pos

<SettingsButton>:
    Button:
        size: (32, 32)
        pos: (self.parent.parent.x + self.parent.parent.width - 32, self.parent.parent.y)
        background_color: 1, 1, 1, 0

        on_press:
            self.size = (30, 30)
            self.pos = (self.parent.parent.x + self.parent.parent.width - 32 + 1, self.parent.parent.y + 1)

        on_release:
            self.size = (32, 32)
            self.pos = (self.parent.parent.x + self.parent.parent.width - 32, self.parent.parent.y)

        Image:
            pos: self.parent.pos
            size: self.parent.size
            source: 'assets/graphics/settings.png'
            
<Abacus>:
    canvas.before:
        Color:
            rgb: 0.4, 0.4, 0.4, 1
        Rectangle:
            source: 'assets/graphics/wood.png'
            size: self.size
            pos: self.pos

<Ledger>:
    #:set BORDER_W 6

    size_hint_x: 1.6
    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'assets/graphics/sandstone.jpg'  # TODO: make this platform independent?
        Color:
            rgba: 0, 0, 0, 0.1
        Rectangle:
            pos: self.pos
            size: (self.width, BORDER_W)
        Color:
            rgba: 1, 1, 1, 0.3
        Rectangle:
            pos: (self.x, self.y + self.height - BORDER_W)
            size: (self.width, BORDER_W)
        Color:
            rgba: 0.5, 0.5, 0.5, 0.3
        Rectangle:
            pos: (self.x, self.y + BORDER_W)
            size: (BORDER_W, self.height - 2 * BORDER_W)
        Rectangle:
            pos: (self.x + self.width - BORDER_W, self.y + BORDER_W)
            size: (BORDER_W, self.height - 2 * BORDER_W)

<OperationsBar>:
    size_hint_x: None
    width: 48
    canvas.before:
        Color:
            rgb: .5, .5, .5
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'assets/graphics/sandbox.jpg'
    BoxLayout:
        orientation: 'vertical'
        pos: self.parent.pos
        size: self.parent.size
        Button:
            pos_hint: {'x': 0, 'top': 1}
            background_color: 1, .1, .1, 0
            on_release: self.parent.parent.send_operation('plus')
            Image:
                pos: self.parent.pos
                size: self.parent.size
                allow_stretch: True
                source: self.parent.parent.parent.button_image('plus')
        Button:
            pos_hint:  {'x': 0, 'top':4/5}
            background_color: 1, .1, .1, 0
            on_release: self.parent.parent.send_operation('minus')
            Image:
                pos: self.parent.pos
                size: self.parent.size
                allow_stretch: True
                source: self.parent.parent.parent.button_image('minus')
        Button:
            pos_hint: {'x': 0, 'top': 3/5}
            background_color: 1, .1, .1, 0
            on_release: self.parent.parent.send_operation('times')
            Image:
                pos: self.parent.pos
                size: self.parent.size
                allow_stretch: True
                source: self.parent.parent.parent.button_image('times')
        Button:
            pos_hint: {'x': 0, 'top': 2/5}
            background_color: 1, .1, .1, 0
            on_release: self.parent.parent.send_operation('divide')
            Image:
                pos: self.parent.pos
                size: self.parent.size
                allow_stretch: True
                source: self.parent.parent.parent.button_image('divide')
        Button:
            pos_hint: {'x': 0, 'top': 1/5}
            background_color: 1, .1, .1, 0
            on_release: self.parent.parent.parent.children[2].next_line()
            Image:
                pos: self.parent.pos
                size: self.parent.size
                allow_stretch: True
                source: self.parent.parent.parent.button_image('equals')


<CuneiformDrawingInput>:
    canvas.before:
        Color:
            rgb: 1, 1, 1, 1
        Rectangle:
            source: 'assets/graphics/sandbox.jpg'
            size: self.size
            pos: self.pos


<ClearButton>:
    Button:
        size: [min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96)] * 2
        x: self.parent.parent.x + self.parent.parent.width - self.width
        y: self.parent.parent.y + self.parent.parent.height - self.height
        background_color: 1, 1, 1, 0

        on_press:
            self.size = [max(min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96) - 2, 1)] * 2
            self.x = self.parent.parent.x + self.parent.parent.width - self.width - 1
            self.y = self.parent.parent.y + self.parent.parent.height - self.height - 1

        on_release:
            self.size = [min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96)] * 2
            self.x = self.parent.parent.x + self.parent.parent.width - self.width
            self.y = self.parent.parent.y + self.parent.parent.height - self.height

            self.parent.parent.clear()
        
        Image:
            pos: self.parent.pos
            size: self.parent.size
            source: self.parent.parent.parent.clear_button_src


<HelpButton>:
    Button:
        size: [min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96)] * 2
        x: self.parent.parent.x + self.parent.parent.width - 2 * self.width
        y: self.parent.parent.y + self.parent.parent.height - self.height
        background_color: 1, 1, 1, 0

        on_press:
            self.size = [max(min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96) - 2, 1)] * 2
            self.x = self.parent.parent.x + self.parent.parent.width - 2 * self.width - 3
            self.y = self.parent.parent.y + self.parent.parent.height - self.height - 1

        on_release:
            self.size = [min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96)] * 2
            self.x = self.parent.parent.x + self.parent.parent.width - 2 * self.width
            self.y = self.parent.parent.y + self.parent.parent.height - self.height

            self.parent.parent.open_help()

        Image:
            pos: self.parent.pos
            size: self.parent.size
            source: 'assets/graphics/help.png'

<NumberButton>:
    Button:
        size: [min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96)] * 2
        x: self.parent.parent.x + self.parent.parent.width - 2 * self.width
        y: self.parent.parent.y + self.parent.parent.height - self.height
        background_color: 1, 1, 1, 0

        on_press:
            self.size = [max(min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96) - 2, 1)] * 2
            self.x = self.parent.parent.x + self.parent.parent.width - 2 * self.width - 3
            self.y = self.parent.parent.y + self.parent.parent.height - self.height - 1

        on_release:
            self.size = [min(min(self.parent.parent.width, self.parent.parent.height) / 8, 96)] * 2
            self.x = self.parent.parent.x + self.parent.parent.width - 2 * self.width
            self.y = self.parent.parent.y + self.parent.parent.height - self.height

            self.parent.parent.send_number()

        Image:
            pos: self.parent.pos
            size: self.parent.size
            source: 'assets/graphics/help.png'